#!/bin/bash

# üöÄ Deploy Script for PRODUCTION - modeo.pl
# Automatyczny deployment na serwer produkcyjny
# UWAGA: To jest deployment produkcyjny - u≈ºywaj ostro≈ºnie!

set -e

echo "üöÄ Modeo.pl PRODUCTION Deployment Script"
echo "========================================="
echo "Target: modeo.pl (PRODUCTION)"
echo "========================================="

# Kolory dla output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funkcje pomocnicze
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Sprawd≈∫ czy jeste≈õ na serwerze produkcyjnym
if [ ! -f "/home/modeo/.production" ]; then
    log_error "Ten skrypt nale≈ºy uruchamiaƒá na serwerze PRODUKCYJNYM!"
    log_info "Utw√≥rz plik /home/modeo/.production na serwerze produkcyjnym"
    log_warning "Upewnij siƒô, ≈ºe jeste≈õ na w≈Ça≈õciwym serwerze!"
    exit 1
fi

# Sprawd≈∫ czy Docker dzia≈Ça
if ! docker --version > /dev/null 2>&1; then
    log_error "Docker nie jest zainstalowany lub nie dzia≈Ça!"
    exit 1
fi

log_error "‚ö†Ô∏è  PRODUKCJA - Kontynuowaƒá? (yes/NO)"
read -r response
if [[ ! "$response" == "yes" ]]; then
    log_info "Deployment anulowany przez u≈ºytkownika"
    exit 0
fi

log_error "Rozpoczynam deployment PRODUKCYJNY..."

# 1. Backup bazy danych
log_info "Tworzƒô backup bazy danych..."
if docker compose ps | grep -q "db"; then
    BACKUP_NAME="backup_$(date +%Y%m%d_%H%M%S).sql"
    docker compose exec -T db mysqldump -u root -p${DB_ROOT_PASSWORD} modeo_production > "backups/${BACKUP_NAME}" || log_warning "Backup failed"
    log_success "Backup utworzony: ${BACKUP_NAME}"
else
    log_warning "Baza danych nie dzia≈Ça - pomijam backup"
fi

# 2. Aktualizuj kod (je≈õli git repo)
if [ -d ".git" ]; then
    log_info "Pobieram najnowszy kod z git..."
    git fetch origin
    git pull origin main
    log_success "Kod zaktualizowany"
fi

# 3. Sprawd≈∫ pliki konfiguracyjne PRODUKCYJNE
log_info "Konfiguruje ≈õrodowisko produkcyjne..."

# Sprawd≈∫ czy istnieje .env.local z prawdziwymi danymi
if [ ! -f ".env.local" ]; then
    log_error "BRAK PLIKU .env.local z prawdziwymi danymi produkcyjnymi!"
    log_error "1. Skopiuj: cp .env.production .env.local"
    log_error "2. Edytuj .env.local z prawdziwymi has≈Çami"
    log_error "3. NIE commituj .env.local do Git!"
    exit 1
fi

# U≈ºyj .env.local dla produkcji (z prawdziwymi danymi)
log_info "U≈ºywam .env.local z prawdziwymi danymi produkcyjnymi"
cp .env.local .env

# Sprawd≈∫ czy wszystkie wymagane zmienne sƒÖ wype≈Çnione
if grep -q "REPLACE_WITH_" .env; then
    log_error "W pliku .env.local sƒÖ jeszcze placeholdery!"
    log_error "Wype≈Çnij wszystkie REPLACE_WITH_* prawdziwymi warto≈õciami"
    exit 1
fi

# Walidacja zmiennych ≈õrodowiskowych
log_info "Sprawdzam konfiguracjƒô zmiennych ≈õrodowiskowych..."
if ! ./validate-env.sh; then
    log_error "Walidacja zmiennych ≈õrodowiskowych nie powiod≈Ça siƒô!"
    exit 1
fi

if [ ! -f "docker-compose.yml" ]; then
    cp docker-compose.prod.yml docker-compose.yml
    log_info "Skopiowano docker-compose.prod.yml"
fi

if [ ! -f "Caddyfile" ]; then
    cp Caddyfile.prod Caddyfile
    log_info "Skopiowano Caddyfile.prod"
fi

if [ ! -f "frontend/next.config.js" ]; then
    cp frontend/next.config.prod.js frontend/next.config.js
    log_info "Skopiowano next.config.prod.js"
fi

# 4. Sprawd≈∫ czy porty sƒÖ wolne
log_info "Sprawdzam porty..."
if netstat -tuln | grep -q ":80\|:443"; then
    log_warning "Porty 80 lub 443 sƒÖ zajƒôte. Kontynuowaƒá? (y/N)"
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        log_error "Deployment anulowany"
        exit 1
    fi
fi

# 5. Build i restart aplikacji
log_info "Rebuildujƒô i uruchamiam aplikacjƒô..."

# Zatrzymaj stare kontenery
docker compose down

# Zbuduj nowe obrazy
docker compose build --no-cache

# Uruchom wszystko
docker compose up -d

log_success "Aplikacja uruchomiona!"

# 6. Sprawd≈∫ status serwis√≥w
log_info "Sprawdzam status serwis√≥w..."
sleep 10

SERVICES=("caddy" "nextjs" "wordpress" "db" "redis")
for service in "${SERVICES[@]}"; do
    if docker compose ps | grep -q "$service.*Up"; then
        log_success "$service: ‚úÖ Dzia≈Ça"
    else
        log_error "$service: ‚ùå Nie dzia≈Ça"
    fi
done

# 7. Health checks
log_info "Wykonujƒô testy po≈ÇƒÖczenia..."

# Test g≈Ç√≥wnej strony
if curl -s -I https://modeo.pl | grep -q "200 OK"; then
    log_success "Strona g≈Ç√≥wna PRODUKCJA: ‚úÖ Dzia≈Ça"
else
    log_error "Strona g≈Ç√≥wna PRODUKCJA: ‚ùå Nie dzia≈Ça"
fi

# Test WordPress admin
if curl -s -I https://modeo.pl/wp-admin/ | grep -q "200\|302"; then
    log_success "WordPress admin PRODUKCJA: ‚úÖ Dzia≈Ça"
else
    log_error "WordPress admin PRODUKCJA: ‚ùå Nie dzia≈Ça"
fi

# Test WooCommerce API
if curl -s https://modeo.pl/wp-json/wc/store/products | grep -q "\["; then
    log_success "WooCommerce API PRODUKCJA: ‚úÖ Dzia≈Ça"
else
    log_error "WooCommerce API PRODUKCJA: ‚ùå Nie dzia≈Ça"
fi

# 8. Podsumowanie
echo ""
echo "üéâ PRODUCTION Deployment zako≈Ñczony!"
echo "====================================="
echo ""
echo "üî¥ PRODUCTION URLs:"
echo "   üåç Strona g≈Ç√≥wna:      https://modeo.pl"
echo "   üõ†Ô∏è  WordPress admin:    https://modeo.pl/wp-admin"
echo "   üõí WooCommerce:        https://modeo.pl/wp-admin/admin.php?page=wc-admin"
echo "   üì± Sklep:              https://modeo.pl/sklep"
echo "   üõí Koszyk:             https://modeo.pl/koszyk"
echo ""
echo "üìä Monitoring:"
echo "   docker compose logs -f       # Wszystkie logi"
echo "   docker compose ps            # Status serwis√≥w"
echo "   htop                         # Zasoby systemu"
echo ""
echo "üö® EMERGENCY - W razie problem√≥w PRODUKCYJNYCH:"
echo "   docker compose down          # ZATRZYMAJ PRODUKCJƒò"
echo "   docker compose up -d         # Uruchom ponownie"
echo "   ./deploy-staging.sh          # Testuj na staging"
echo "   ./deploy.sh                  # Pon√≥w production deployment"
echo ""
echo "üíæ Backup bazy:"
echo "   Backup: backups/${BACKUP_NAME:-latest_backup.sql}"
echo "   Restore: mysql -u root -p modeo_production < backup_file.sql"

log_success "PRODUCTION Deployment completed successfully! üöÄ"
echo ""
log_error "‚ö†Ô∏è  UWAGA: To jest ≈õrodowisko PRODUKCYJNE - monitoruj przez pierwsze godziny!"